#!/usr/bin/env ruby

require 'optparse'
require 'lerna/runner'

LOGGER = lambda { |str|
  time = Time.now.utc
  timestamp = time.strftime('%Y-%m-%dT%H:%M:%S.') << '%06dZ' % time.usec
  puts '[%s #%d] %s' % [timestamp, Process.pid, str]
}

options = {
  strategies: %w[ dual-external external-digital-only internal-only ],
  system: method(:system)
}

executable = File.basename(__FILE__)

parser = OptionParser.new { |opts|
  opts.banner = "Usage: #{executable} [options]"
  opts.on(
    '-s', '--strategies', String,
    "Strategies in order of precedence (default #{options[:strategies].join(',')})"
  ) do |str|
    options[:strategies] = str.split(/,/)
  end
  opts.on(
    '-d', '--dry-run',
    'Just log the actions that would be taken'
  ) do
    options[:system] = ->(*args) { LOGGER.call(args.join(' ')) }
  end
  opts.on(
    "-h", "--help",
    "Display this help message and exit"
  ) do
    puts opts
    exit
  end
}
parser.parse!

runner = Lerna::Runner.new(
  logger: LOGGER,
  strategies: options[:strategies],
  system: options[:system]
)

trap('TERM') {
  LOGGER.call('Exiting')
  exit
}

loop do
  runner.run
  sleep 2
end
